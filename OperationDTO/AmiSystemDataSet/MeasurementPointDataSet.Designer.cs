//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace OperationDTO.AmiSystemDataSet {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MeasurementPointDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MeasurementPointDataSet : global::System.Data.DataSet {
        
        private MeasurementPointInfoDataTable tableMeasurementPointInfo;
        
        private MeasurementPointDataTable tableMeasurementPoint;
        
        private MeasurementPointLostMessageDataTable tableMeasurementPointLostMessage;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MeasurementPointDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected MeasurementPointDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["MeasurementPointInfo"] != null)) {
                    base.Tables.Add(new MeasurementPointInfoDataTable(ds.Tables["MeasurementPointInfo"]));
                }
                if ((ds.Tables["MeasurementPoint"] != null)) {
                    base.Tables.Add(new MeasurementPointDataTable(ds.Tables["MeasurementPoint"]));
                }
                if ((ds.Tables["MeasurementPointLostMessage"] != null)) {
                    base.Tables.Add(new MeasurementPointLostMessageDataTable(ds.Tables["MeasurementPointLostMessage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MeasurementPointInfoDataTable MeasurementPointInfo {
            get {
                return this.tableMeasurementPointInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MeasurementPointDataTable MeasurementPoint {
            get {
                return this.tableMeasurementPoint;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MeasurementPointLostMessageDataTable MeasurementPointLostMessage {
            get {
                return this.tableMeasurementPointLostMessage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            MeasurementPointDataSet cln = ((MeasurementPointDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["MeasurementPointInfo"] != null)) {
                    base.Tables.Add(new MeasurementPointInfoDataTable(ds.Tables["MeasurementPointInfo"]));
                }
                if ((ds.Tables["MeasurementPoint"] != null)) {
                    base.Tables.Add(new MeasurementPointDataTable(ds.Tables["MeasurementPoint"]));
                }
                if ((ds.Tables["MeasurementPointLostMessage"] != null)) {
                    base.Tables.Add(new MeasurementPointLostMessageDataTable(ds.Tables["MeasurementPointLostMessage"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableMeasurementPointInfo = ((MeasurementPointInfoDataTable)(base.Tables["MeasurementPointInfo"]));
            if ((initTable == true)) {
                if ((this.tableMeasurementPointInfo != null)) {
                    this.tableMeasurementPointInfo.InitVars();
                }
            }
            this.tableMeasurementPoint = ((MeasurementPointDataTable)(base.Tables["MeasurementPoint"]));
            if ((initTable == true)) {
                if ((this.tableMeasurementPoint != null)) {
                    this.tableMeasurementPoint.InitVars();
                }
            }
            this.tableMeasurementPointLostMessage = ((MeasurementPointLostMessageDataTable)(base.Tables["MeasurementPointLostMessage"]));
            if ((initTable == true)) {
                if ((this.tableMeasurementPointLostMessage != null)) {
                    this.tableMeasurementPointLostMessage.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "MeasurementPointDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MeasurementPointDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableMeasurementPointInfo = new MeasurementPointInfoDataTable();
            base.Tables.Add(this.tableMeasurementPointInfo);
            this.tableMeasurementPoint = new MeasurementPointDataTable();
            base.Tables.Add(this.tableMeasurementPoint);
            this.tableMeasurementPointLostMessage = new MeasurementPointLostMessageDataTable();
            base.Tables.Add(this.tableMeasurementPointLostMessage);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeMeasurementPointInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeMeasurementPoint() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeMeasurementPointLostMessage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MeasurementPointDataSet ds = new MeasurementPointDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MeasurementPointInfoRowChangeEventHandler(object sender, MeasurementPointInfoRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MeasurementPointRowChangeEventHandler(object sender, MeasurementPointRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void MeasurementPointLostMessageRowChangeEventHandler(object sender, MeasurementPointLostMessageRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MeasurementPointInfoDataTable : global::System.Data.TypedTableBase<MeasurementPointInfoRow> {
            
            private global::System.Data.DataColumn columnMeasurementPointCode;
            
            private global::System.Data.DataColumn columnMeterStatus;
            
            private global::System.Data.DataColumn columnMeasurementPointMeterStatus;
            
            private global::System.Data.DataColumn columnMeasurementPointName;
            
            private global::System.Data.DataColumn columnMeterType;
            
            private global::System.Data.DataColumn columnMeasurementPointGroupName;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnCreatedDate;
            
            private global::System.Data.DataColumn columnDcuCode;
            
            private global::System.Data.DataColumn columnMeterCode;
            
            private global::System.Data.DataColumn columnMeasurementPointAddress;
            
            private global::System.Data.DataColumn columnMeasurementPointType;
            
            private global::System.Data.DataColumn columnContract;
            
            private global::System.Data.DataColumn columnLastOperationTime;
            
            private global::System.Data.DataColumn columnMeasurementPointId;
            
            private global::System.Data.DataColumn columnMeasurementPointMeterId;
            
            private global::System.Data.DataColumn columnEditedDate;
            
            private global::System.Data.DataColumn columnConnectionStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointInfoDataTable() {
                this.TableName = "MeasurementPointInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MeasurementPointInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected MeasurementPointInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointCodeColumn {
                get {
                    return this.columnMeasurementPointCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeterStatusColumn {
                get {
                    return this.columnMeterStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointMeterStatusColumn {
                get {
                    return this.columnMeasurementPointMeterStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointNameColumn {
                get {
                    return this.columnMeasurementPointName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeterTypeColumn {
                get {
                    return this.columnMeterType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointGroupNameColumn {
                get {
                    return this.columnMeasurementPointGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CreatedDateColumn {
                get {
                    return this.columnCreatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DcuCodeColumn {
                get {
                    return this.columnDcuCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeterCodeColumn {
                get {
                    return this.columnMeterCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointAddressColumn {
                get {
                    return this.columnMeasurementPointAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointTypeColumn {
                get {
                    return this.columnMeasurementPointType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractColumn {
                get {
                    return this.columnContract;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LastOperationTimeColumn {
                get {
                    return this.columnLastOperationTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointIdColumn {
                get {
                    return this.columnMeasurementPointId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointMeterIdColumn {
                get {
                    return this.columnMeasurementPointMeterId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EditedDateColumn {
                get {
                    return this.columnEditedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConnectionStatusColumn {
                get {
                    return this.columnConnectionStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointInfoRow this[int index] {
                get {
                    return ((MeasurementPointInfoRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointInfoRowChangeEventHandler MeasurementPointInfoRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointInfoRowChangeEventHandler MeasurementPointInfoRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointInfoRowChangeEventHandler MeasurementPointInfoRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointInfoRowChangeEventHandler MeasurementPointInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddMeasurementPointInfoRow(MeasurementPointInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointInfoRow AddMeasurementPointInfoRow(
                        string MeasurementPointCode, 
                        int MeterStatus, 
                        int MeasurementPointMeterStatus, 
                        string MeasurementPointName, 
                        string MeterType, 
                        string MeasurementPointGroupName, 
                        bool IsDeleted, 
                        System.DateTime CreatedDate, 
                        string DcuCode, 
                        string MeterCode, 
                        string MeasurementPointAddress, 
                        int MeasurementPointType, 
                        string Contract, 
                        System.DateTime LastOperationTime, 
                        System.DateTime EditedDate, 
                        int ConnectionStatus) {
                MeasurementPointInfoRow rowMeasurementPointInfoRow = ((MeasurementPointInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MeasurementPointCode,
                        MeterStatus,
                        MeasurementPointMeterStatus,
                        MeasurementPointName,
                        MeterType,
                        MeasurementPointGroupName,
                        IsDeleted,
                        CreatedDate,
                        DcuCode,
                        MeterCode,
                        MeasurementPointAddress,
                        MeasurementPointType,
                        Contract,
                        LastOperationTime,
                        null,
                        null,
                        EditedDate,
                        ConnectionStatus};
                rowMeasurementPointInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMeasurementPointInfoRow);
                return rowMeasurementPointInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                MeasurementPointInfoDataTable cln = ((MeasurementPointInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MeasurementPointInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnMeasurementPointCode = base.Columns["MeasurementPointCode"];
                this.columnMeterStatus = base.Columns["MeterStatus"];
                this.columnMeasurementPointMeterStatus = base.Columns["MeasurementPointMeterStatus"];
                this.columnMeasurementPointName = base.Columns["MeasurementPointName"];
                this.columnMeterType = base.Columns["MeterType"];
                this.columnMeasurementPointGroupName = base.Columns["MeasurementPointGroupName"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnCreatedDate = base.Columns["CreatedDate"];
                this.columnDcuCode = base.Columns["DcuCode"];
                this.columnMeterCode = base.Columns["MeterCode"];
                this.columnMeasurementPointAddress = base.Columns["MeasurementPointAddress"];
                this.columnMeasurementPointType = base.Columns["MeasurementPointType"];
                this.columnContract = base.Columns["Contract"];
                this.columnLastOperationTime = base.Columns["LastOperationTime"];
                this.columnMeasurementPointId = base.Columns["MeasurementPointId"];
                this.columnMeasurementPointMeterId = base.Columns["MeasurementPointMeterId"];
                this.columnEditedDate = base.Columns["EditedDate"];
                this.columnConnectionStatus = base.Columns["ConnectionStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnMeasurementPointCode = new global::System.Data.DataColumn("MeasurementPointCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointCode);
                this.columnMeterStatus = new global::System.Data.DataColumn("MeterStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterStatus);
                this.columnMeasurementPointMeterStatus = new global::System.Data.DataColumn("MeasurementPointMeterStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointMeterStatus);
                this.columnMeasurementPointName = new global::System.Data.DataColumn("MeasurementPointName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointName);
                this.columnMeterType = new global::System.Data.DataColumn("MeterType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterType);
                this.columnMeasurementPointGroupName = new global::System.Data.DataColumn("MeasurementPointGroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointGroupName);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnCreatedDate = new global::System.Data.DataColumn("CreatedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDate);
                this.columnDcuCode = new global::System.Data.DataColumn("DcuCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDcuCode);
                this.columnMeterCode = new global::System.Data.DataColumn("MeterCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterCode);
                this.columnMeasurementPointAddress = new global::System.Data.DataColumn("MeasurementPointAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointAddress);
                this.columnMeasurementPointType = new global::System.Data.DataColumn("MeasurementPointType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointType);
                this.columnContract = new global::System.Data.DataColumn("Contract", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContract);
                this.columnLastOperationTime = new global::System.Data.DataColumn("LastOperationTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastOperationTime);
                this.columnMeasurementPointId = new global::System.Data.DataColumn("MeasurementPointId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointId);
                this.columnMeasurementPointMeterId = new global::System.Data.DataColumn("MeasurementPointMeterId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointMeterId);
                this.columnEditedDate = new global::System.Data.DataColumn("EditedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditedDate);
                this.columnConnectionStatus = new global::System.Data.DataColumn("ConnectionStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionStatus);
                this.columnMeasurementPointCode.MaxLength = 20;
                this.columnMeasurementPointName.MaxLength = 250;
                this.columnMeterType.MaxLength = 250;
                this.columnMeasurementPointGroupName.MaxLength = 250;
                this.columnDcuCode.MaxLength = 20;
                this.columnMeterCode.MaxLength = 20;
                this.columnMeasurementPointAddress.MaxLength = 500;
                this.columnContract.MaxLength = 2147483647;
                this.columnLastOperationTime.ReadOnly = true;
                this.columnMeasurementPointId.AutoIncrement = true;
                this.columnMeasurementPointId.AutoIncrementSeed = -1;
                this.columnMeasurementPointId.AutoIncrementStep = -1;
                this.columnMeasurementPointId.ReadOnly = true;
                this.columnMeasurementPointMeterId.AutoIncrement = true;
                this.columnMeasurementPointMeterId.AutoIncrementSeed = -1;
                this.columnMeasurementPointMeterId.AutoIncrementStep = -1;
                this.columnMeasurementPointMeterId.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointInfoRow NewMeasurementPointInfoRow() {
                return ((MeasurementPointInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MeasurementPointInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(MeasurementPointInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MeasurementPointInfoRowChanged != null)) {
                    this.MeasurementPointInfoRowChanged(this, new MeasurementPointInfoRowChangeEvent(((MeasurementPointInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MeasurementPointInfoRowChanging != null)) {
                    this.MeasurementPointInfoRowChanging(this, new MeasurementPointInfoRowChangeEvent(((MeasurementPointInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MeasurementPointInfoRowDeleted != null)) {
                    this.MeasurementPointInfoRowDeleted(this, new MeasurementPointInfoRowChangeEvent(((MeasurementPointInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MeasurementPointInfoRowDeleting != null)) {
                    this.MeasurementPointInfoRowDeleting(this, new MeasurementPointInfoRowChangeEvent(((MeasurementPointInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveMeasurementPointInfoRow(MeasurementPointInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MeasurementPointDataSet ds = new MeasurementPointDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MeasurementPointInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MeasurementPointDataTable : global::System.Data.TypedTableBase<MeasurementPointRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnMeasurementPointId;
            
            private global::System.Data.DataColumn columnMeterTypeId;
            
            private global::System.Data.DataColumn columnMeasurementPointGroupId;
            
            private global::System.Data.DataColumn columnDcuId;
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnStartUpdateTime;
            
            private global::System.Data.DataColumn columnPhaseType;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnNote;
            
            private global::System.Data.DataColumn columnAddress;
            
            private global::System.Data.DataColumn columnTURatio;
            
            private global::System.Data.DataColumn columnTIRatio;
            
            private global::System.Data.DataColumn columnMutilplier;
            
            private global::System.Data.DataColumn columnLaunchDay;
            
            private global::System.Data.DataColumn columnSettlementDate;
            
            private global::System.Data.DataColumn columnSettlementUser;
            
            private global::System.Data.DataColumn columnCreatedUserId;
            
            private global::System.Data.DataColumn columnCreatedDate;
            
            private global::System.Data.DataColumn columnEditedUserId;
            
            private global::System.Data.DataColumn columnEditedDate;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnLat;
            
            private global::System.Data.DataColumn columnLong;
            
            private global::System.Data.DataColumn columnTakeOver;
            
            private global::System.Data.DataColumn columnTakeOverDate;
            
            private global::System.Data.DataColumn columnTakeOverUser;
            
            private global::System.Data.DataColumn columnTakeOverBill;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointDataTable() {
                this.TableName = "MeasurementPoint";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MeasurementPointDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected MeasurementPointDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointIdColumn {
                get {
                    return this.columnMeasurementPointId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeterTypeIdColumn {
                get {
                    return this.columnMeterTypeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointGroupIdColumn {
                get {
                    return this.columnMeasurementPointGroupId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DcuIdColumn {
                get {
                    return this.columnDcuId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StartUpdateTimeColumn {
                get {
                    return this.columnStartUpdateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PhaseTypeColumn {
                get {
                    return this.columnPhaseType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NoteColumn {
                get {
                    return this.columnNote;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn AddressColumn {
                get {
                    return this.columnAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TURatioColumn {
                get {
                    return this.columnTURatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TIRatioColumn {
                get {
                    return this.columnTIRatio;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MutilplierColumn {
                get {
                    return this.columnMutilplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LaunchDayColumn {
                get {
                    return this.columnLaunchDay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SettlementDateColumn {
                get {
                    return this.columnSettlementDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SettlementUserColumn {
                get {
                    return this.columnSettlementUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CreatedUserIdColumn {
                get {
                    return this.columnCreatedUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CreatedDateColumn {
                get {
                    return this.columnCreatedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EditedUserIdColumn {
                get {
                    return this.columnEditedUserId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn EditedDateColumn {
                get {
                    return this.columnEditedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LatColumn {
                get {
                    return this.columnLat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn LongColumn {
                get {
                    return this.columnLong;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TakeOverColumn {
                get {
                    return this.columnTakeOver;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TakeOverDateColumn {
                get {
                    return this.columnTakeOverDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TakeOverUserColumn {
                get {
                    return this.columnTakeOverUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TakeOverBillColumn {
                get {
                    return this.columnTakeOverBill;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointRow this[int index] {
                get {
                    return ((MeasurementPointRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointRowChangeEventHandler MeasurementPointRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointRowChangeEventHandler MeasurementPointRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointRowChangeEventHandler MeasurementPointRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointRowChangeEventHandler MeasurementPointRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddMeasurementPointRow(MeasurementPointRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointRow AddMeasurementPointRow(
                        string MeasurementPointId, 
                        long MeterTypeId, 
                        long MeasurementPointGroupId, 
                        long DcuId, 
                        int Type, 
                        string Status, 
                        System.DateTime StartUpdateTime, 
                        int PhaseType, 
                        string Name, 
                        string Note, 
                        string Address, 
                        decimal TURatio, 
                        decimal TIRatio, 
                        decimal Mutilplier, 
                        System.DateTime LaunchDay, 
                        System.DateTime SettlementDate, 
                        string SettlementUser, 
                        string CreatedUserId, 
                        System.DateTime CreatedDate, 
                        string EditedUserId, 
                        System.DateTime EditedDate, 
                        bool IsDeleted, 
                        string Lat, 
                        string Long, 
                        int TakeOver, 
                        System.DateTime TakeOverDate, 
                        string TakeOverUser, 
                        long TakeOverBill) {
                MeasurementPointRow rowMeasurementPointRow = ((MeasurementPointRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MeasurementPointId,
                        MeterTypeId,
                        MeasurementPointGroupId,
                        DcuId,
                        Type,
                        Status,
                        StartUpdateTime,
                        PhaseType,
                        Name,
                        Note,
                        Address,
                        TURatio,
                        TIRatio,
                        Mutilplier,
                        LaunchDay,
                        SettlementDate,
                        SettlementUser,
                        CreatedUserId,
                        CreatedDate,
                        EditedUserId,
                        EditedDate,
                        IsDeleted,
                        Lat,
                        Long,
                        TakeOver,
                        TakeOverDate,
                        TakeOverUser,
                        TakeOverBill};
                rowMeasurementPointRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMeasurementPointRow);
                return rowMeasurementPointRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointRow FindById(long Id) {
                return ((MeasurementPointRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                MeasurementPointDataTable cln = ((MeasurementPointDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MeasurementPointDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnMeasurementPointId = base.Columns["MeasurementPointId"];
                this.columnMeterTypeId = base.Columns["MeterTypeId"];
                this.columnMeasurementPointGroupId = base.Columns["MeasurementPointGroupId"];
                this.columnDcuId = base.Columns["DcuId"];
                this.columnType = base.Columns["Type"];
                this.columnStatus = base.Columns["Status"];
                this.columnStartUpdateTime = base.Columns["StartUpdateTime"];
                this.columnPhaseType = base.Columns["PhaseType"];
                this.columnName = base.Columns["Name"];
                this.columnNote = base.Columns["Note"];
                this.columnAddress = base.Columns["Address"];
                this.columnTURatio = base.Columns["TURatio"];
                this.columnTIRatio = base.Columns["TIRatio"];
                this.columnMutilplier = base.Columns["Mutilplier"];
                this.columnLaunchDay = base.Columns["LaunchDay"];
                this.columnSettlementDate = base.Columns["SettlementDate"];
                this.columnSettlementUser = base.Columns["SettlementUser"];
                this.columnCreatedUserId = base.Columns["CreatedUserId"];
                this.columnCreatedDate = base.Columns["CreatedDate"];
                this.columnEditedUserId = base.Columns["EditedUserId"];
                this.columnEditedDate = base.Columns["EditedDate"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnLat = base.Columns["Lat"];
                this.columnLong = base.Columns["Long"];
                this.columnTakeOver = base.Columns["TakeOver"];
                this.columnTakeOverDate = base.Columns["TakeOverDate"];
                this.columnTakeOverUser = base.Columns["TakeOverUser"];
                this.columnTakeOverBill = base.Columns["TakeOverBill"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnMeasurementPointId = new global::System.Data.DataColumn("MeasurementPointId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointId);
                this.columnMeterTypeId = new global::System.Data.DataColumn("MeterTypeId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterTypeId);
                this.columnMeasurementPointGroupId = new global::System.Data.DataColumn("MeasurementPointGroupId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointGroupId);
                this.columnDcuId = new global::System.Data.DataColumn("DcuId", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDcuId);
                this.columnType = new global::System.Data.DataColumn("Type", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnStartUpdateTime = new global::System.Data.DataColumn("StartUpdateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartUpdateTime);
                this.columnPhaseType = new global::System.Data.DataColumn("PhaseType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhaseType);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnNote = new global::System.Data.DataColumn("Note", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNote);
                this.columnAddress = new global::System.Data.DataColumn("Address", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress);
                this.columnTURatio = new global::System.Data.DataColumn("TURatio", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTURatio);
                this.columnTIRatio = new global::System.Data.DataColumn("TIRatio", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTIRatio);
                this.columnMutilplier = new global::System.Data.DataColumn("Mutilplier", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMutilplier);
                this.columnLaunchDay = new global::System.Data.DataColumn("LaunchDay", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLaunchDay);
                this.columnSettlementDate = new global::System.Data.DataColumn("SettlementDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSettlementDate);
                this.columnSettlementUser = new global::System.Data.DataColumn("SettlementUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSettlementUser);
                this.columnCreatedUserId = new global::System.Data.DataColumn("CreatedUserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedUserId);
                this.columnCreatedDate = new global::System.Data.DataColumn("CreatedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDate);
                this.columnEditedUserId = new global::System.Data.DataColumn("EditedUserId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditedUserId);
                this.columnEditedDate = new global::System.Data.DataColumn("EditedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEditedDate);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnLat = new global::System.Data.DataColumn("Lat", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLat);
                this.columnLong = new global::System.Data.DataColumn("Long", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLong);
                this.columnTakeOver = new global::System.Data.DataColumn("TakeOver", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTakeOver);
                this.columnTakeOverDate = new global::System.Data.DataColumn("TakeOverDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTakeOverDate);
                this.columnTakeOverUser = new global::System.Data.DataColumn("TakeOverUser", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTakeOverUser);
                this.columnTakeOverBill = new global::System.Data.DataColumn("TakeOverBill", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTakeOverBill);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnMeasurementPointId.MaxLength = 20;
                this.columnMeasurementPointGroupId.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnStatus.MaxLength = 50;
                this.columnPhaseType.AllowDBNull = false;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 250;
                this.columnNote.MaxLength = 2147483647;
                this.columnAddress.MaxLength = 500;
                this.columnSettlementUser.MaxLength = 250;
                this.columnCreatedUserId.MaxLength = 20;
                this.columnEditedUserId.MaxLength = 20;
                this.columnIsDeleted.AllowDBNull = false;
                this.columnLat.MaxLength = 50;
                this.columnLong.MaxLength = 50;
                this.columnTakeOverUser.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointRow NewMeasurementPointRow() {
                return ((MeasurementPointRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MeasurementPointRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(MeasurementPointRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MeasurementPointRowChanged != null)) {
                    this.MeasurementPointRowChanged(this, new MeasurementPointRowChangeEvent(((MeasurementPointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MeasurementPointRowChanging != null)) {
                    this.MeasurementPointRowChanging(this, new MeasurementPointRowChangeEvent(((MeasurementPointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MeasurementPointRowDeleted != null)) {
                    this.MeasurementPointRowDeleted(this, new MeasurementPointRowChangeEvent(((MeasurementPointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MeasurementPointRowDeleting != null)) {
                    this.MeasurementPointRowDeleting(this, new MeasurementPointRowChangeEvent(((MeasurementPointRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveMeasurementPointRow(MeasurementPointRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MeasurementPointDataSet ds = new MeasurementPointDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MeasurementPointDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MeasurementPointLostMessageDataTable : global::System.Data.TypedTableBase<MeasurementPointLostMessageRow> {
            
            private global::System.Data.DataColumn columnMeasurementPointGroup;
            
            private global::System.Data.DataColumn columnDcuId;
            
            private global::System.Data.DataColumn columnMeasurementPointName;
            
            private global::System.Data.DataColumn columnConnectionStatus;
            
            private global::System.Data.DataColumn columnGatewayIp;
            
            private global::System.Data.DataColumn columnContractName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointLostMessageDataTable() {
                this.TableName = "MeasurementPointLostMessage";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MeasurementPointLostMessageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected MeasurementPointLostMessageDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointGroupColumn {
                get {
                    return this.columnMeasurementPointGroup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DcuIdColumn {
                get {
                    return this.columnDcuId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeasurementPointNameColumn {
                get {
                    return this.columnMeasurementPointName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ConnectionStatusColumn {
                get {
                    return this.columnConnectionStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GatewayIpColumn {
                get {
                    return this.columnGatewayIp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractNameColumn {
                get {
                    return this.columnContractName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointLostMessageRow this[int index] {
                get {
                    return ((MeasurementPointLostMessageRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointLostMessageRowChangeEventHandler MeasurementPointLostMessageRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointLostMessageRowChangeEventHandler MeasurementPointLostMessageRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointLostMessageRowChangeEventHandler MeasurementPointLostMessageRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event MeasurementPointLostMessageRowChangeEventHandler MeasurementPointLostMessageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddMeasurementPointLostMessageRow(MeasurementPointLostMessageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointLostMessageRow AddMeasurementPointLostMessageRow(string MeasurementPointGroup, string DcuId, string MeasurementPointName, int ConnectionStatus, string GatewayIp, string ContractName) {
                MeasurementPointLostMessageRow rowMeasurementPointLostMessageRow = ((MeasurementPointLostMessageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MeasurementPointGroup,
                        DcuId,
                        MeasurementPointName,
                        ConnectionStatus,
                        GatewayIp,
                        ContractName};
                rowMeasurementPointLostMessageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMeasurementPointLostMessageRow);
                return rowMeasurementPointLostMessageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                MeasurementPointLostMessageDataTable cln = ((MeasurementPointLostMessageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MeasurementPointLostMessageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnMeasurementPointGroup = base.Columns["MeasurementPointGroup"];
                this.columnDcuId = base.Columns["DcuId"];
                this.columnMeasurementPointName = base.Columns["MeasurementPointName"];
                this.columnConnectionStatus = base.Columns["ConnectionStatus"];
                this.columnGatewayIp = base.Columns["GatewayIp"];
                this.columnContractName = base.Columns["ContractName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnMeasurementPointGroup = new global::System.Data.DataColumn("MeasurementPointGroup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointGroup);
                this.columnDcuId = new global::System.Data.DataColumn("DcuId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDcuId);
                this.columnMeasurementPointName = new global::System.Data.DataColumn("MeasurementPointName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeasurementPointName);
                this.columnConnectionStatus = new global::System.Data.DataColumn("ConnectionStatus", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConnectionStatus);
                this.columnGatewayIp = new global::System.Data.DataColumn("GatewayIp", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGatewayIp);
                this.columnContractName = new global::System.Data.DataColumn("ContractName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractName);
                this.columnMeasurementPointGroup.MaxLength = 250;
                this.columnDcuId.MaxLength = 20;
                this.columnMeasurementPointName.AllowDBNull = false;
                this.columnMeasurementPointName.MaxLength = 250;
                this.columnGatewayIp.MaxLength = 50;
                this.columnContractName.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointLostMessageRow NewMeasurementPointLostMessageRow() {
                return ((MeasurementPointLostMessageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MeasurementPointLostMessageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(MeasurementPointLostMessageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MeasurementPointLostMessageRowChanged != null)) {
                    this.MeasurementPointLostMessageRowChanged(this, new MeasurementPointLostMessageRowChangeEvent(((MeasurementPointLostMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MeasurementPointLostMessageRowChanging != null)) {
                    this.MeasurementPointLostMessageRowChanging(this, new MeasurementPointLostMessageRowChangeEvent(((MeasurementPointLostMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MeasurementPointLostMessageRowDeleted != null)) {
                    this.MeasurementPointLostMessageRowDeleted(this, new MeasurementPointLostMessageRowChangeEvent(((MeasurementPointLostMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MeasurementPointLostMessageRowDeleting != null)) {
                    this.MeasurementPointLostMessageRowDeleting(this, new MeasurementPointLostMessageRowChangeEvent(((MeasurementPointLostMessageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveMeasurementPointLostMessageRow(MeasurementPointLostMessageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MeasurementPointDataSet ds = new MeasurementPointDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MeasurementPointLostMessageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MeasurementPointInfoRow : global::System.Data.DataRow {
            
            private MeasurementPointInfoDataTable tableMeasurementPointInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MeasurementPointInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMeasurementPointInfo = ((MeasurementPointInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointCode {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.MeasurementPointCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointCode\' in table \'MeasurementPointInfo\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MeterStatus {
                get {
                    try {
                        return ((int)(this[this.tableMeasurementPointInfo.MeterStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeterStatus\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeterStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MeasurementPointMeterStatus {
                get {
                    try {
                        return ((int)(this[this.tableMeasurementPointInfo.MeasurementPointMeterStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointMeterStatus\' in table \'MeasurementPointInfo" +
                                "\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointMeterStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointName {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.MeasurementPointNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointName\' in table \'MeasurementPointInfo\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeterType {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.MeterTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeterType\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeterTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointGroupName {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.MeasurementPointGroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointGroupName\' in table \'MeasurementPointInfo\' " +
                                "is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointGroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableMeasurementPointInfo.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CreatedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPointInfo.CreatedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDate\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.CreatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DcuCode {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.DcuCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DcuCode\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.DcuCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeterCode {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.MeterCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeterCode\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeterCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointAddress {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.MeasurementPointAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointAddress\' in table \'MeasurementPointInfo\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int MeasurementPointType {
                get {
                    try {
                        return ((int)(this[this.tableMeasurementPointInfo.MeasurementPointTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointType\' in table \'MeasurementPointInfo\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Contract {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointInfo.ContractColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contract\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.ContractColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LastOperationTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPointInfo.LastOperationTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastOperationTime\' in table \'MeasurementPointInfo\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.LastOperationTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MeasurementPointId {
                get {
                    try {
                        return ((long)(this[this.tableMeasurementPointInfo.MeasurementPointIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointId\' in table \'MeasurementPointInfo\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MeasurementPointMeterId {
                get {
                    try {
                        return ((long)(this[this.tableMeasurementPointInfo.MeasurementPointMeterIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointMeterId\' in table \'MeasurementPointInfo\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.MeasurementPointMeterIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime EditedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPointInfo.EditedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EditedDate\' in table \'MeasurementPointInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.EditedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ConnectionStatus {
                get {
                    try {
                        return ((int)(this[this.tableMeasurementPointInfo.ConnectionStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionStatus\' in table \'MeasurementPointInfo\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointInfo.ConnectionStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointCodeNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointCodeNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeterStatusNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeterStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeterStatusNull() {
                this[this.tableMeasurementPointInfo.MeterStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointMeterStatusNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointMeterStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointMeterStatusNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointMeterStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointNameNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointNameNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeterTypeNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeterTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeterTypeNull() {
                this[this.tableMeasurementPointInfo.MeterTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointGroupNameNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointGroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointGroupNameNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointGroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tableMeasurementPointInfo.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIsDeletedNull() {
                this[this.tableMeasurementPointInfo.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedDateNull() {
                return this.IsNull(this.tableMeasurementPointInfo.CreatedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedDateNull() {
                this[this.tableMeasurementPointInfo.CreatedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDcuCodeNull() {
                return this.IsNull(this.tableMeasurementPointInfo.DcuCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDcuCodeNull() {
                this[this.tableMeasurementPointInfo.DcuCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeterCodeNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeterCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeterCodeNull() {
                this[this.tableMeasurementPointInfo.MeterCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointAddressNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointAddressNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointTypeNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointTypeNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsContractNull() {
                return this.IsNull(this.tableMeasurementPointInfo.ContractColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetContractNull() {
                this[this.tableMeasurementPointInfo.ContractColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLastOperationTimeNull() {
                return this.IsNull(this.tableMeasurementPointInfo.LastOperationTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLastOperationTimeNull() {
                this[this.tableMeasurementPointInfo.LastOperationTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointIdNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointIdNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointMeterIdNull() {
                return this.IsNull(this.tableMeasurementPointInfo.MeasurementPointMeterIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointMeterIdNull() {
                this[this.tableMeasurementPointInfo.MeasurementPointMeterIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEditedDateNull() {
                return this.IsNull(this.tableMeasurementPointInfo.EditedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditedDateNull() {
                this[this.tableMeasurementPointInfo.EditedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConnectionStatusNull() {
                return this.IsNull(this.tableMeasurementPointInfo.ConnectionStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConnectionStatusNull() {
                this[this.tableMeasurementPointInfo.ConnectionStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MeasurementPointRow : global::System.Data.DataRow {
            
            private MeasurementPointDataTable tableMeasurementPoint;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MeasurementPointRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMeasurementPoint = ((MeasurementPointDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long Id {
                get {
                    return ((long)(this[this.tableMeasurementPoint.IdColumn]));
                }
                set {
                    this[this.tableMeasurementPoint.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointId {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.MeasurementPointIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointId\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.MeasurementPointIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MeterTypeId {
                get {
                    try {
                        return ((long)(this[this.tableMeasurementPoint.MeterTypeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeterTypeId\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.MeterTypeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long MeasurementPointGroupId {
                get {
                    return ((long)(this[this.tableMeasurementPoint.MeasurementPointGroupIdColumn]));
                }
                set {
                    this[this.tableMeasurementPoint.MeasurementPointGroupIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long DcuId {
                get {
                    try {
                        return ((long)(this[this.tableMeasurementPoint.DcuIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DcuId\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.DcuIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Type {
                get {
                    return ((int)(this[this.tableMeasurementPoint.TypeColumn]));
                }
                set {
                    this[this.tableMeasurementPoint.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime StartUpdateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPoint.StartUpdateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartUpdateTime\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.StartUpdateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int PhaseType {
                get {
                    return ((int)(this[this.tableMeasurementPoint.PhaseTypeColumn]));
                }
                set {
                    this[this.tableMeasurementPoint.PhaseTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Name {
                get {
                    return ((string)(this[this.tableMeasurementPoint.NameColumn]));
                }
                set {
                    this[this.tableMeasurementPoint.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Note {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.NoteColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Note\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.NoteColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Address {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.AddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.AddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TURatio {
                get {
                    try {
                        return ((decimal)(this[this.tableMeasurementPoint.TURatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TURatio\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.TURatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TIRatio {
                get {
                    try {
                        return ((decimal)(this[this.tableMeasurementPoint.TIRatioColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TIRatio\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.TIRatioColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Mutilplier {
                get {
                    try {
                        return ((decimal)(this[this.tableMeasurementPoint.MutilplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Mutilplier\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.MutilplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime LaunchDay {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPoint.LaunchDayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LaunchDay\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.LaunchDayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime SettlementDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPoint.SettlementDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SettlementDate\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.SettlementDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string SettlementUser {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.SettlementUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SettlementUser\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.SettlementUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CreatedUserId {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.CreatedUserIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedUserId\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.CreatedUserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime CreatedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPoint.CreatedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDate\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.CreatedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string EditedUserId {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.EditedUserIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EditedUserId\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.EditedUserIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime EditedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPoint.EditedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EditedDate\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.EditedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDeleted {
                get {
                    return ((bool)(this[this.tableMeasurementPoint.IsDeletedColumn]));
                }
                set {
                    this[this.tableMeasurementPoint.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Lat {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.LatColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Lat\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.LatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Long {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.LongColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Long\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.LongColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int TakeOver {
                get {
                    try {
                        return ((int)(this[this.tableMeasurementPoint.TakeOverColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TakeOver\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.TakeOverColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime TakeOverDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableMeasurementPoint.TakeOverDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TakeOverDate\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.TakeOverDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TakeOverUser {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPoint.TakeOverUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TakeOverUser\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.TakeOverUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public long TakeOverBill {
                get {
                    try {
                        return ((long)(this[this.tableMeasurementPoint.TakeOverBillColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TakeOverBill\' in table \'MeasurementPoint\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPoint.TakeOverBillColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointIdNull() {
                return this.IsNull(this.tableMeasurementPoint.MeasurementPointIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointIdNull() {
                this[this.tableMeasurementPoint.MeasurementPointIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeterTypeIdNull() {
                return this.IsNull(this.tableMeasurementPoint.MeterTypeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeterTypeIdNull() {
                this[this.tableMeasurementPoint.MeterTypeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDcuIdNull() {
                return this.IsNull(this.tableMeasurementPoint.DcuIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDcuIdNull() {
                this[this.tableMeasurementPoint.DcuIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStatusNull() {
                return this.IsNull(this.tableMeasurementPoint.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStatusNull() {
                this[this.tableMeasurementPoint.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStartUpdateTimeNull() {
                return this.IsNull(this.tableMeasurementPoint.StartUpdateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStartUpdateTimeNull() {
                this[this.tableMeasurementPoint.StartUpdateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsNoteNull() {
                return this.IsNull(this.tableMeasurementPoint.NoteColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetNoteNull() {
                this[this.tableMeasurementPoint.NoteColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsAddressNull() {
                return this.IsNull(this.tableMeasurementPoint.AddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetAddressNull() {
                this[this.tableMeasurementPoint.AddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTURatioNull() {
                return this.IsNull(this.tableMeasurementPoint.TURatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTURatioNull() {
                this[this.tableMeasurementPoint.TURatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTIRatioNull() {
                return this.IsNull(this.tableMeasurementPoint.TIRatioColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTIRatioNull() {
                this[this.tableMeasurementPoint.TIRatioColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMutilplierNull() {
                return this.IsNull(this.tableMeasurementPoint.MutilplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMutilplierNull() {
                this[this.tableMeasurementPoint.MutilplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLaunchDayNull() {
                return this.IsNull(this.tableMeasurementPoint.LaunchDayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLaunchDayNull() {
                this[this.tableMeasurementPoint.LaunchDayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSettlementDateNull() {
                return this.IsNull(this.tableMeasurementPoint.SettlementDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSettlementDateNull() {
                this[this.tableMeasurementPoint.SettlementDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSettlementUserNull() {
                return this.IsNull(this.tableMeasurementPoint.SettlementUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSettlementUserNull() {
                this[this.tableMeasurementPoint.SettlementUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedUserIdNull() {
                return this.IsNull(this.tableMeasurementPoint.CreatedUserIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedUserIdNull() {
                this[this.tableMeasurementPoint.CreatedUserIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCreatedDateNull() {
                return this.IsNull(this.tableMeasurementPoint.CreatedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCreatedDateNull() {
                this[this.tableMeasurementPoint.CreatedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEditedUserIdNull() {
                return this.IsNull(this.tableMeasurementPoint.EditedUserIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditedUserIdNull() {
                this[this.tableMeasurementPoint.EditedUserIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsEditedDateNull() {
                return this.IsNull(this.tableMeasurementPoint.EditedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetEditedDateNull() {
                this[this.tableMeasurementPoint.EditedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLatNull() {
                return this.IsNull(this.tableMeasurementPoint.LatColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLatNull() {
                this[this.tableMeasurementPoint.LatColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsLongNull() {
                return this.IsNull(this.tableMeasurementPoint.LongColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetLongNull() {
                this[this.tableMeasurementPoint.LongColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTakeOverNull() {
                return this.IsNull(this.tableMeasurementPoint.TakeOverColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTakeOverNull() {
                this[this.tableMeasurementPoint.TakeOverColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTakeOverDateNull() {
                return this.IsNull(this.tableMeasurementPoint.TakeOverDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTakeOverDateNull() {
                this[this.tableMeasurementPoint.TakeOverDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTakeOverUserNull() {
                return this.IsNull(this.tableMeasurementPoint.TakeOverUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTakeOverUserNull() {
                this[this.tableMeasurementPoint.TakeOverUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTakeOverBillNull() {
                return this.IsNull(this.tableMeasurementPoint.TakeOverBillColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTakeOverBillNull() {
                this[this.tableMeasurementPoint.TakeOverBillColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class MeasurementPointLostMessageRow : global::System.Data.DataRow {
            
            private MeasurementPointLostMessageDataTable tableMeasurementPointLostMessage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal MeasurementPointLostMessageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMeasurementPointLostMessage = ((MeasurementPointLostMessageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointGroup {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointLostMessage.MeasurementPointGroupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MeasurementPointGroup\' in table \'MeasurementPointLostMessag" +
                                "e\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointLostMessage.MeasurementPointGroupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DcuId {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointLostMessage.DcuIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DcuId\' in table \'MeasurementPointLostMessage\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointLostMessage.DcuIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string MeasurementPointName {
                get {
                    return ((string)(this[this.tableMeasurementPointLostMessage.MeasurementPointNameColumn]));
                }
                set {
                    this[this.tableMeasurementPointLostMessage.MeasurementPointNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ConnectionStatus {
                get {
                    try {
                        return ((int)(this[this.tableMeasurementPointLostMessage.ConnectionStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConnectionStatus\' in table \'MeasurementPointLostMessage\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointLostMessage.ConnectionStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GatewayIp {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointLostMessage.GatewayIpColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GatewayIp\' in table \'MeasurementPointLostMessage\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointLostMessage.GatewayIpColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ContractName {
                get {
                    try {
                        return ((string)(this[this.tableMeasurementPointLostMessage.ContractNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContractName\' in table \'MeasurementPointLostMessage\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableMeasurementPointLostMessage.ContractNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsMeasurementPointGroupNull() {
                return this.IsNull(this.tableMeasurementPointLostMessage.MeasurementPointGroupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetMeasurementPointGroupNull() {
                this[this.tableMeasurementPointLostMessage.MeasurementPointGroupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDcuIdNull() {
                return this.IsNull(this.tableMeasurementPointLostMessage.DcuIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDcuIdNull() {
                this[this.tableMeasurementPointLostMessage.DcuIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsConnectionStatusNull() {
                return this.IsNull(this.tableMeasurementPointLostMessage.ConnectionStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetConnectionStatusNull() {
                this[this.tableMeasurementPointLostMessage.ConnectionStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGatewayIpNull() {
                return this.IsNull(this.tableMeasurementPointLostMessage.GatewayIpColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGatewayIpNull() {
                this[this.tableMeasurementPointLostMessage.GatewayIpColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsContractNameNull() {
                return this.IsNull(this.tableMeasurementPointLostMessage.ContractNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetContractNameNull() {
                this[this.tableMeasurementPointLostMessage.ContractNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MeasurementPointInfoRowChangeEvent : global::System.EventArgs {
            
            private MeasurementPointInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointInfoRowChangeEvent(MeasurementPointInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MeasurementPointRowChangeEvent : global::System.EventArgs {
            
            private MeasurementPointRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointRowChangeEvent(MeasurementPointRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class MeasurementPointLostMessageRowChangeEvent : global::System.EventArgs {
            
            private MeasurementPointLostMessageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointLostMessageRowChangeEvent(MeasurementPointLostMessageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public MeasurementPointLostMessageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace OperationDTO.AmiSystemDataSet.MeasurementPointDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MeasurementPointInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MeasurementPointInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MeasurementPointInfo";
            tableMapping.ColumnMappings.Add("MeasurementPointCode", "MeasurementPointCode");
            tableMapping.ColumnMappings.Add("MeterStatus", "MeterStatus");
            tableMapping.ColumnMappings.Add("MeasurementPointMeterStatus", "MeasurementPointMeterStatus");
            tableMapping.ColumnMappings.Add("MeasurementPointName", "MeasurementPointName");
            tableMapping.ColumnMappings.Add("MeterType", "MeterType");
            tableMapping.ColumnMappings.Add("MeasurementPointGroupName", "MeasurementPointGroupName");
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted");
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
            tableMapping.ColumnMappings.Add("DcuCode", "DcuCode");
            tableMapping.ColumnMappings.Add("MeterCode", "MeterCode");
            tableMapping.ColumnMappings.Add("MeasurementPointAddress", "MeasurementPointAddress");
            tableMapping.ColumnMappings.Add("MeasurementPointType", "MeasurementPointType");
            tableMapping.ColumnMappings.Add("Contract", "Contract");
            tableMapping.ColumnMappings.Add("LastOperationTime", "LastOperationTime");
            tableMapping.ColumnMappings.Add("MeasurementPointId", "MeasurementPointId");
            tableMapping.ColumnMappings.Add("MeasurementPointMeterId", "MeasurementPointMeterId");
            tableMapping.ColumnMappings.Add("EditedDate", "EditedDate");
            tableMapping.ColumnMappings.Add("ConnectionStatus", "ConnectionStatus");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OperationDTO.Properties.Settings.Default.AmiSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        MeasurementPointMeter.MeasurementPointMeterId, MeasurementPoint.Id " +
                "AS MeasurementPointId, \r\n                         MeasurementPoint.MeasurementPo" +
                "intId AS MeasurementPointCode, MeterType.Name AS MeterType, DataConcentratorUnit" +
                ".DcuId AS DcuCode, \r\n                         Meter.MeterId AS MeterCode, Meter." +
                "Status AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStat" +
                "us, \r\n                         MeasurementPoint.Name AS MeasurementPointName, Me" +
                "asurementPoint.Address AS MeasurementPointAddress, \r\n                         Me" +
                "asurementPointGroup.Name AS MeasurementPointGroupName, MeasurementPoint.Type AS " +
                "MeasurementPointType, Contract.Note AS Contract, \r\n                         Meas" +
                "urementPoint.CreatedDate, MeasurementPoint.IsDeleted, maxdate.LastOperationTime," +
                " MeasurementPoint.EditedDate, \r\n                         DataConcentratorUnit.Co" +
                "nnectionStatus\r\nFROM            MeasurementPoint FULL OUTER JOIN\r\n              " +
                "           MeasurementPointMeter ON MeasurementPoint.Id = MeasurementPointMeter." +
                "MeasurementPointId LEFT OUTER JOIN\r\n                         MeterType ON Measur" +
                "ementPoint.MeterTypeId = MeterType.Id LEFT OUTER JOIN\r\n                         " +
                "DataConcentratorUnit ON MeasurementPoint.DcuId = DataConcentratorUnit.Id LEFT OU" +
                "TER JOIN\r\n                         Meter ON MeasurementPointMeter.MeterId = Mete" +
                "r.Id LEFT OUTER JOIN\r\n                         Customer ON MeasurementPointMeter" +
                ".CustomerId = Customer.Id LEFT OUTER JOIN\r\n                         MeasurementP" +
                "ointGroup ON MeasurementPoint.MeasurementPointGroupId = MeasurementPointGroup.Id" +
                " LEFT OUTER JOIN\r\n                         Contract ON MeasurementPoint.TakeOver" +
                "Bill = Contract.Id LEFT OUTER JOIN\r\n                             (SELECT        " +
                "MeasurementPointMeterId, MAX(ServerTime) AS LastOperationTime\r\n                 " +
                "              FROM            Operation3P\r\n                               GROUP " +
                "BY MeasurementPointMeterId) AS maxdate ON MeasurementPointMeter.MeasurementPoint" +
                "MeterId = maxdate.MeasurementPointMeterId\r\nWHERE        (DataConcentratorUnit.Id" +
                " = @dcuId)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dcuId", global::System.Data.SqlDbType.Variant, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        MeasurementPointMeter.MeasurementPointMeterId, MeasurementPoint.Id " +
                "AS MeasurementPointId, \r\n                         MeasurementPoint.MeasurementPo" +
                "intId AS MeasurementPointCode, MeterType.Name AS MeterType, DataConcentratorUnit" +
                ".DcuId AS DcuCode, \r\n                         Meter.MeterId AS MeterCode, Meter." +
                "Status AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStat" +
                "us, \r\n                         MeasurementPoint.Name AS MeasurementPointName, Me" +
                "asurementPoint.Address AS MeasurementPointAddress, \r\n                         Me" +
                "asurementPointGroup.Name AS MeasurementPointGroupName, MeasurementPoint.Type AS " +
                "MeasurementPointType, Contract.Note AS Contract, \r\n                         Meas" +
                "urementPoint.CreatedDate, MeasurementPoint.IsDeleted, maxdate.LastOperationTime," +
                " MeasurementPoint.EditedDate\r\nFROM            MeasurementPoint FULL OUTER JOIN\r\n" +
                "                         MeasurementPointMeter ON MeasurementPoint.Id = Measurem" +
                "entPointMeter.MeasurementPointId LEFT OUTER JOIN\r\n                         Meter" +
                "Type ON MeasurementPoint.MeterTypeId = MeterType.Id LEFT OUTER JOIN\r\n           " +
                "              DataConcentratorUnit ON MeasurementPoint.DcuId = DataConcentratorU" +
                "nit.Id LEFT OUTER JOIN\r\n                         Meter ON MeasurementPointMeter." +
                "MeterId = Meter.Id LEFT OUTER JOIN\r\n                         Customer ON Measure" +
                "mentPointMeter.CustomerId = Customer.Id LEFT OUTER JOIN\r\n                       " +
                "  MeasurementPointGroup ON MeasurementPoint.MeasurementPointGroupId = Measuremen" +
                "tPointGroup.Id LEFT OUTER JOIN\r\n                         Contract ON Measurement" +
                "Point.TakeOverBill = Contract.Id LEFT OUTER JOIN\r\n                             (" +
                "SELECT        MeasurementPointMeterId, MAX(ServerTime) AS LastOperationTime\r\n   " +
                "                            FROM            Operation3P\r\n                       " +
                "        GROUP BY MeasurementPointMeterId) AS maxdate ON MeasurementPointMeter.Me" +
                "asurementPointMeterId = maxdate.MeasurementPointMeterId\r\nWHERE        (Measureme" +
                "ntPoint.Id IS NOT NULL) AND (@mpCode IS NULL OR\r\n                         Measur" +
                "ementPoint.MeasurementPointId LIKE \'%\' + @mpCode) AND (@dcucode IS NULL OR\r\n    " +
                "                     DataConcentratorUnit.DcuId LIKE \'%\' + @dcucode) AND (@meter" +
                "Code IS NULL OR\r\n                         Meter.MeterId LIKE \'%\' + @meterCode) A" +
                "ND (@groupId IS NULL OR\r\n                         MeasurementPointGroup.Id = @gr" +
                "oupId) AND (@contractId IS NULL OR\r\n                         Contract.Id = @cont" +
                "ractId) AND (@mptype IS NULL OR\r\n                         MeasurementPoint.Type " +
                "= @mptype) AND (@isDeleted IS NULL OR\r\n                         MeasurementPoint" +
                ".IsDeleted = @isDeleted) AND (@createdFrom IS NULL OR\r\n                         " +
                "CAST(MeasurementPoint.CreatedDate AS date) > CAST(DATEADD(DAY, - 1, @createdFrom" +
                ") AS date)) AND (@createdTo IS NULL OR\r\n                         CAST(Measuremen" +
                "tPoint.CreatedDate AS date) < CAST(DATEADD(DAY, 1, @createdTo) AS date))\r\nORDER " +
                "BY MeasurementPoint.CreatedDate DESC";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mpCode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dcucode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "DcuCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@meterCode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "MeterCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@groupId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contractId", global::System.Data.SqlDbType.VarChar, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mptype", global::System.Data.SqlDbType.VarChar, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isDeleted", global::System.Data.SqlDbType.VarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@createdFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@createdTo", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT    MeasurementPointMeter.MeasurementPointMeterId, MeasurementPoint.Id AS M" +
                "easurementPointId, \r\n                         MeasurementPoint.MeasurementPointI" +
                "d AS MeasurementPointCode, MeterType.Name AS MeterType, DataConcentratorUnit.Dcu" +
                "Id AS DcuCode, \r\n                         Meter.MeterId AS MeterCode, Meter.Stat" +
                "us AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStatus, " +
                "\r\n                         MeasurementPoint.Name AS MeasurementPointName, Measur" +
                "ementPoint.Address AS MeasurementPointAddress, \r\n                         Measur" +
                "ementPointGroup.Name AS MeasurementPointGroupName, MeasurementPoint.Type AS Meas" +
                "urementPointType, Contract.Note AS Contract, \r\n                         Measurem" +
                "entPoint.CreatedDate, MeasurementPoint.IsDeleted, maxdate.LastOperationTime, Mea" +
                "surementPoint.EditedDate,DataConcentratorUnit.ConnectionStatus\r\nFROM            " +
                "MeasurementPoint FULL OUTER JOIN\r\n                         MeasurementPointMeter" +
                " ON MeasurementPoint.Id = MeasurementPointMeter.MeasurementPointId LEFT OUTER JO" +
                "IN\r\n                         MeterType ON MeasurementPoint.MeterTypeId = MeterTy" +
                "pe.Id LEFT OUTER JOIN\r\n                         DataConcentratorUnit ON Measurem" +
                "entPoint.DcuId = DataConcentratorUnit.Id LEFT OUTER JOIN\r\n                      " +
                "   Meter ON MeasurementPointMeter.MeterId = Meter.Id LEFT OUTER JOIN\r\n          " +
                "               Customer ON MeasurementPointMeter.CustomerId = Customer.Id LEFT O" +
                "UTER JOIN\r\n                         MeasurementPointGroup ON MeasurementPoint.Me" +
                "asurementPointGroupId = MeasurementPointGroup.Id LEFT OUTER JOIN\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t" +
                "\t\r\n                         Contract ON MeasurementPoint.TakeOverBill = Contract" +
                ".Id\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t  LEFT OUTER JOIN\r\n                             (SELECT      " +
                "  MeasurementPointMeterId, MAX(ServerTime) AS LastOperationTime\r\n               " +
                "                FROM            Operation3P\r\n                               GROU" +
                "P BY MeasurementPointMeterId) AS maxdate ON MeasurementPointMeter.MeasurementPoi" +
                "ntMeterId = maxdate.MeasurementPointMeterId\r\nWHERE        (MeasurementPoint.Id I" +
                "S NOT NULL) \r\nAND (@mpCode IS NULL OR\r\n                         MeasurementPoint" +
                ".MeasurementPointId LIKE \'%\' + @mpCode) \r\n\t\t\t\t\t\t AND (@dcucode IS NULL OR\r\n     " +
                "                    DataConcentratorUnit.DcuId LIKE \'%\' + @dcucode) \r\n\t\t\t\t\t\t AND" +
                " (@meterCode IS NULL OR\r\n                         Meter.MeterId LIKE \'%\' + @mete" +
                "rCode) \t\t\t\t\t\t\r\n\t\t\t\t\t\t AND (@contractId IS NULL OR\r\n                         Cont" +
                "ract.Id = @contractId) \r\n\t\t\t\t\t\t AND (@mptype IS NULL OR\r\n                       " +
                "  MeasurementPoint.Type = @mptype) \r\n\t\t\t\t\t\t AND (@isDeleted IS NULL OR\r\n        " +
                "                 MeasurementPoint.IsDeleted = @isDeleted) \r\n\t\t\t\t\t\t AND (@orgId i" +
                "s null or MeasurementPointGroup.OrgId in (\r\n\t\t\t\t\t\t\t SELECT ID\r\n\t\t\t\t\t\t\t FROM [Org" +
                "anization]\r\n\t\t\t\t\t\t\t WHERE ID = @orgId\r\n\t\t\t\t\t\t\t UNION\r\n\t\t\t\t\t\t\t SELECT ID\r\n\t\t\t\t\t\t\t" +
                " FROM [Organization]\r\n\t\t\t\t\t\t\t WHERE ParentID = @orgId\r\n\t\t\t\t\t\t\t UNION ALL\r\n\t\t\t\t\t\t" +
                "\t SELECT d.ID\r\n\t\t\t\t\t\t\t FROM [Organization] as d\r\n\t\t\t\t\t\t\t\tINNER JOIN \r\n\t\t\t\t\t\t\t\t (" +
                "  SELECT ID, Name\r\n\t\t\t\t\t\t\t\t\tFROM [Organization] WHERE ParentID = @orgId\r\n\t\t\t\t\t\t\t" +
                "\t )parent \r\n\t\t\t\t\t\t\t\t   ON d.ParentID = parent.ID\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t )\r\n\t\t\t\t\t\t AN" +
                "D (@mpGroupId is null or MeasurementPoint.MeasurementPointGroupId = @mpGroupId)\r" +
                "\n\t\t\t\t\t\t AND (@createdFrom IS NULL OR\r\n                         CAST(MeasurementP" +
                "oint.CreatedDate AS date) > CAST(DATEADD(DAY, - 1, @createdFrom) AS date)) \r\n\t\t\t" +
                "\t\t\t AND (@createdTo IS NULL OR\r\n                         CAST(MeasurementPoint.C" +
                "reatedDate AS date) < CAST(DATEADD(DAY, 1, @createdTo) AS date))\t\t\t\t\t \r\n\t\t\t\t\t\tOR" +
                "DER BY MeasurementPoint.CreatedDate DESC";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mpCode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dcucode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "DcuCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@meterCode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "MeterCode", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contractId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mptype", global::System.Data.SqlDbType.VarChar, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isDeleted", global::System.Data.SqlDbType.VarChar, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@createdFrom", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@createdTo", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orgId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mpGroupId", global::System.Data.SqlDbType.VarChar, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointGroupId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT        MeasurementPoint.Id AS MeasurementPointId, MeasurementPoint.MeasurementPointId AS MeasurementPointCode, MeterType.Name AS MeterType, 
                         DataConcentratorUnit.DcuId, Meter.MeterId, Meter.Status AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStatus, 
                         MeasurementPoint.Name AS MeasurementPointName, Customer.CustomerId, Customer.Name AS CustomerName, Customer.Address, 
                         MeasurementPointGroup.Name AS MeasurementPointGroupName, MeasurementPoint.IsDeleted
FROM            MeasurementPoint INNER JOIN
                         MeasurementPointMeter ON MeasurementPoint.Id = MeasurementPointMeter.MeasurementPointId INNER JOIN
                         MeterType ON MeasurementPoint.MeterTypeId = MeterType.Id INNER JOIN
                         DataConcentratorUnit ON MeasurementPoint.DcuId = DataConcentratorUnit.Id INNER JOIN
                         Meter ON MeasurementPointMeter.MeterId = Meter.Id INNER JOIN
                         Customer ON MeasurementPointMeter.CustomerId = Customer.Id INNER JOIN
                         MeasurementPointGroup ON MeasurementPoint.MeasurementPointGroupId = MeasurementPointGroup.Id
WHERE        (Customer.Id = @CustomerId)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CustomerId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT        MeasurementPoint.Id AS MeasurementPointId, MeasurementPoint.MeasurementPointId AS MeasurementPointCode, MeterType.Name AS MeterType, 
                         DataConcentratorUnit.DcuId, Meter.MeterId, Meter.Status AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStatus, 
                         MeasurementPoint.Name AS MeasurementPointName, Customer.CustomerId, Customer.Name AS CustomerName, Customer.Address, 
                         MeasurementPointGroup.Name AS MeasurementPointGroupName
FROM            MeasurementPoint INNER JOIN
                         MeasurementPointMeter ON MeasurementPoint.Id = MeasurementPointMeter.MeasurementPointId INNER JOIN
                         MeterType ON MeasurementPoint.MeterTypeId = MeterType.Id INNER JOIN
                         DataConcentratorUnit ON MeasurementPoint.DcuId = DataConcentratorUnit.Id INNER JOIN
                         Meter ON MeasurementPointMeter.MeterId = Meter.Id INNER JOIN
                         Customer ON MeasurementPointMeter.CustomerId = Customer.Id INNER JOIN
                         MeasurementPointGroup ON MeasurementPoint.MeasurementPointGroupId = MeasurementPointGroup.Id
WHERE        (DataConcentratorUnit.DcuId LIKE '%' + @DcuCode + '%')";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DcuCode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "DcuId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT        MeasurementPointMeter.MeasurementPointMeterId, MeasurementPoint.Id " +
                "AS MeasurementPointId, \r\n                         MeasurementPoint.MeasurementPo" +
                "intId AS MeasurementPointCode, MeterType.Name AS MeterType, DataConcentratorUnit" +
                ".DcuId AS DcuCode, \r\n                         Meter.MeterId AS MeterCode, Meter." +
                "Status AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStat" +
                "us, \r\n                         MeasurementPoint.Name AS MeasurementPointName, Me" +
                "asurementPoint.Address AS MeasurementPointAddress, \r\n                         Me" +
                "asurementPointGroup.Name AS MeasurementPointGroupName, MeasurementPoint.Type AS " +
                "MeasurementPointType, Contract.Note AS Contract, \r\n                         Meas" +
                "urementPoint.CreatedDate, MeasurementPoint.IsDeleted, maxdate.LastOperationTime\r" +
                "\nFROM            MeasurementPoint FULL OUTER JOIN\r\n                         Meas" +
                "urementPointMeter ON MeasurementPoint.Id = MeasurementPointMeter.MeasurementPoin" +
                "tId LEFT OUTER JOIN\r\n                         MeterType ON MeasurementPoint.Mete" +
                "rTypeId = MeterType.Id LEFT OUTER JOIN\r\n                         DataConcentrato" +
                "rUnit ON MeasurementPoint.DcuId = DataConcentratorUnit.Id LEFT OUTER JOIN\r\n     " +
                "                    Meter ON MeasurementPointMeter.MeterId = Meter.Id LEFT OUTER" +
                " JOIN\r\n                         Customer ON MeasurementPointMeter.CustomerId = C" +
                "ustomer.Id LEFT OUTER JOIN\r\n                         MeasurementPointGroup ON Me" +
                "asurementPoint.MeasurementPointGroupId = MeasurementPointGroup.Id LEFT OUTER JOI" +
                "N\r\n                         Contract ON MeasurementPoint.TakeOverBill = Contract" +
                ".Id LEFT OUTER JOIN\r\n                             (SELECT        MeasurementPoin" +
                "tMeterId, MAX(ServerTime) AS LastOperationTime\r\n                               F" +
                "ROM            Operation3P\r\n                               GROUP BY MeasurementP" +
                "ointMeterId) AS maxdate ON MeasurementPointMeter.MeasurementPointMeterId = maxda" +
                "te.MeasurementPointMeterId\r\nWHERE        (MeasurementPoint.Id = @MeasurementPoin" +
                "tId)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeasurementPointId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "SELECT        MeasurementPointMeter.MeasurementPointMeterId, MeasurementPoint.Id " +
                "AS MeasurementPointId, \r\n                         MeasurementPoint.MeasurementPo" +
                "intId AS MeasurementPointCode, MeterType.Name AS MeterType, DataConcentratorUnit" +
                ".DcuId AS DcuCode, \r\n                         Meter.MeterId AS MeterCode, Meter." +
                "Status AS MeterStatus, MeasurementPointMeter.Status AS MeasurementPointMeterStat" +
                "us, \r\n                         MeasurementPoint.Name AS MeasurementPointName, Me" +
                "asurementPoint.Address AS MeasurementPointAddress, \r\n                         Me" +
                "asurementPointGroup.Name AS MeasurementPointGroupName, MeasurementPoint.Type AS " +
                "MeasurementPointType, Contract.Note AS Contract, \r\n                         Meas" +
                "urementPoint.CreatedDate, MeasurementPoint.IsDeleted, maxdate.LastOperationTime," +
                " MeasurementPoint.EditedDate, \r\n                         DataConcentratorUnit.Co" +
                "nnectionStatus\r\nFROM            MeasurementPoint FULL OUTER JOIN\r\n              " +
                "           MeasurementPointMeter ON MeasurementPoint.Id = MeasurementPointMeter." +
                "MeasurementPointId LEFT OUTER JOIN\r\n                         MeterType ON Measur" +
                "ementPoint.MeterTypeId = MeterType.Id LEFT OUTER JOIN\r\n                         " +
                "DataConcentratorUnit ON MeasurementPoint.DcuId = DataConcentratorUnit.Id LEFT OU" +
                "TER JOIN\r\n                         Meter ON MeasurementPointMeter.MeterId = Mete" +
                "r.Id LEFT OUTER JOIN\r\n                         Customer ON MeasurementPointMeter" +
                ".CustomerId = Customer.Id LEFT OUTER JOIN\r\n                         MeasurementP" +
                "ointGroup ON MeasurementPoint.MeasurementPointGroupId = MeasurementPointGroup.Id" +
                " LEFT OUTER JOIN\r\n                         Contract ON MeasurementPoint.TakeOver" +
                "Bill = Contract.Id LEFT OUTER JOIN\r\n                             (SELECT        " +
                "MeasurementPointMeterId, MAX(ServerTime) AS LastOperationTime\r\n                 " +
                "              FROM            Operation3P\r\n                               GROUP " +
                "BY MeasurementPointMeterId) AS maxdate ON MeasurementPointMeter.MeasurementPoint" +
                "MeterId = maxdate.MeasurementPointMeterId\r\n   where Meter.Id =@meterId";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@meterId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillByDcuId(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, object dcuId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((dcuId == null)) {
                throw new global::System.ArgumentNullException("dcuId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((object)(dcuId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByConditions(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, string mpCode, string dcucode, string meterCode, string groupId, string contractId, string mptype, string isDeleted, string createdFrom, string createdTo) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((mpCode == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(mpCode));
            }
            if ((dcucode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(dcucode));
            }
            if ((meterCode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(meterCode));
            }
            if ((groupId == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(groupId));
            }
            if ((contractId == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(contractId));
            }
            if ((mptype == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(mptype));
            }
            if ((isDeleted == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(isDeleted));
            }
            if ((createdFrom == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(createdFrom));
            }
            if ((createdTo == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(createdTo));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByConditionsWithOrgId(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, string mpCode, string dcucode, string meterCode, string contractId, string mptype, string isDeleted, string createdFrom, string createdTo, string orgId, string mpGroupId) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((mpCode == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(mpCode));
            }
            if ((dcucode == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(dcucode));
            }
            if ((meterCode == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(meterCode));
            }
            if ((contractId == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(contractId));
            }
            if ((mptype == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(mptype));
            }
            if ((isDeleted == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(isDeleted));
            }
            if ((createdFrom == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(createdFrom));
            }
            if ((createdTo == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(createdTo));
            }
            if ((orgId == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(orgId));
            }
            if ((mpGroupId == null)) {
                this.Adapter.SelectCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(mpGroupId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCustomerId(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, long CustomerId) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(CustomerId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDcuCode(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, string DcuCode) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((DcuCode == null)) {
                throw new global::System.ArgumentNullException("DcuCode");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(DcuCode));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMeasurementPointId(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, global::System.Nullable<long> MeasurementPointId) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((MeasurementPointId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((long)(MeasurementPointId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMeterId(MeasurementPointDataSet.MeasurementPointInfoDataTable dataTable, long meterId) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(meterId));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MeasurementPointTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MeasurementPointTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MeasurementPoint";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("MeasurementPointId", "MeasurementPointId");
            tableMapping.ColumnMappings.Add("MeterTypeId", "MeterTypeId");
            tableMapping.ColumnMappings.Add("MeasurementPointGroupId", "MeasurementPointGroupId");
            tableMapping.ColumnMappings.Add("DcuId", "DcuId");
            tableMapping.ColumnMappings.Add("Type", "Type");
            tableMapping.ColumnMappings.Add("Status", "Status");
            tableMapping.ColumnMappings.Add("StartUpdateTime", "StartUpdateTime");
            tableMapping.ColumnMappings.Add("PhaseType", "PhaseType");
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("Note", "Note");
            tableMapping.ColumnMappings.Add("Address", "Address");
            tableMapping.ColumnMappings.Add("TURatio", "TURatio");
            tableMapping.ColumnMappings.Add("TIRatio", "TIRatio");
            tableMapping.ColumnMappings.Add("Mutilplier", "Mutilplier");
            tableMapping.ColumnMappings.Add("LaunchDay", "LaunchDay");
            tableMapping.ColumnMappings.Add("SettlementDate", "SettlementDate");
            tableMapping.ColumnMappings.Add("SettlementUser", "SettlementUser");
            tableMapping.ColumnMappings.Add("CreatedUserId", "CreatedUserId");
            tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
            tableMapping.ColumnMappings.Add("EditedUserId", "EditedUserId");
            tableMapping.ColumnMappings.Add("EditedDate", "EditedDate");
            tableMapping.ColumnMappings.Add("IsDeleted", "IsDeleted");
            tableMapping.ColumnMappings.Add("Lat", "Lat");
            tableMapping.ColumnMappings.Add("Long", "Long");
            tableMapping.ColumnMappings.Add("TakeOver", "TakeOver");
            tableMapping.ColumnMappings.Add("TakeOverDate", "TakeOverDate");
            tableMapping.ColumnMappings.Add("TakeOverUser", "TakeOverUser");
            tableMapping.ColumnMappings.Add("TakeOverBill", "TakeOverBill");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM MeasurementPoint\r\nWHERE        (Id = @Original_Id)";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[MeasurementPoint] ([MeasurementPointId], [MeterTypeId], [MeasurementPointGroupId], [DcuId], [Type], [Status], [StartUpdateTime], [PhaseType], [Name], [Note], [Address], [TURatio], [TIRatio], [Mutilplier], [LaunchDay], [SettlementDate], [SettlementUser], [CreatedUserId], [CreatedDate], [EditedUserId], [EditedDate], [IsDeleted], [Lat], [Long], [TakeOver], [TakeOverDate], [TakeOverUser], [TakeOverBill]) VALUES (@MeasurementPointId, @MeterTypeId, @MeasurementPointGroupId, @DcuId, @Type, @Status, @StartUpdateTime, @PhaseType, @Name, @Note, @Address, @TURatio, @TIRatio, @Mutilplier, @LaunchDay, @SettlementDate, @SettlementUser, @CreatedUserId, @CreatedDate, @EditedUserId, @EditedDate, @IsDeleted, @Lat, @Long, @TakeOver, @TakeOverDate, @TakeOverUser, @TakeOverBill);
SELECT Id, MeasurementPointId, MeterTypeId, MeasurementPointGroupId, DcuId, Type, Status, StartUpdateTime, PhaseType, Name, Note, Address, TURatio, TIRatio, Mutilplier, LaunchDay, SettlementDate, SettlementUser, CreatedUserId, CreatedDate, EditedUserId, EditedDate, IsDeleted, Lat, Long, TakeOver, TakeOverDate, TakeOverUser, TakeOverBill FROM MeasurementPoint WHERE (Id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeasurementPointId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterTypeId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeasurementPointGroupId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointGroupId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DcuId", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DcuId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartUpdateTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartUpdateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhaseType", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PhaseType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TURatio", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "TURatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TIRatio", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "TIRatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mutilplier", global::System.Data.SqlDbType.Decimal, 0, global::System.Data.ParameterDirection.Input, 10, 0, "Mutilplier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaunchDay", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LaunchDay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SettlementDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SettlementDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SettlementUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SettlementUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedUserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedUserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EditedUserId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EditedUserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EditedDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "EditedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsDeleted", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lat", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Lat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Long", global::System.Data.SqlDbType.NChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Long", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOver", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOver", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOverDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOverDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOverUser", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOverUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOverBill", global::System.Data.SqlDbType.BigInt, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOverBill", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE       MeasurementPoint
SET                MeasurementPointId = @MeasurementPointId, MeterTypeId = @MeterTypeId, MeasurementPointGroupId = @MeasurementPointGroupId, DcuId = @DcuId, 
                         Type = @Type, Status = @Status, StartUpdateTime = @StartUpdateTime, PhaseType = @PhaseType, Name = @Name, Note = @Note, Address = @Address, 
                         TURatio = @TURatio, TIRatio = @TIRatio, Mutilplier = @Mutilplier, LaunchDay = @LaunchDay, SettlementDate = @SettlementDate, 
                         SettlementUser = @SettlementUser, CreatedUserId = @CreatedUserId, CreatedDate = @CreatedDate, EditedUserId = @EditedUserId, EditedDate = @EditedDate, 
                         IsDeleted = @IsDeleted, Lat = @Lat, Long = @Long, TakeOver = @TakeOver, TakeOverDate = @TakeOverDate, TakeOverUser = @TakeOverUser, 
                         TakeOverBill = @TakeOverBill
WHERE        (Id = @Original_Id); 
SELECT Id, MeasurementPointId, MeterTypeId, MeasurementPointGroupId, DcuId, Type, Status, StartUpdateTime, PhaseType, Name, Note, Address, TURatio, TIRatio, Mutilplier, LaunchDay, SettlementDate, SettlementUser, CreatedUserId, CreatedDate, EditedUserId, EditedDate, IsDeleted, Lat, Long, TakeOver, TakeOverDate, TakeOverUser, TakeOverBill FROM MeasurementPoint WHERE (Id = @Id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeasurementPointId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterTypeId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MeterTypeId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeasurementPointGroupId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointGroupId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DcuId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "DcuId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Type", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Type", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Status", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartUpdateTime", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "StartUpdateTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PhaseType", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PhaseType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Name", global::System.Data.SqlDbType.NVarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "Name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Note", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Note", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Address", global::System.Data.SqlDbType.NVarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "Address", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TURatio", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "TURatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TIRatio", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "TIRatio", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Mutilplier", global::System.Data.SqlDbType.Decimal, 9, global::System.Data.ParameterDirection.Input, 10, 0, "Mutilplier", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LaunchDay", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "LaunchDay", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SettlementDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "SettlementDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SettlementUser", global::System.Data.SqlDbType.NVarChar, 250, global::System.Data.ParameterDirection.Input, 0, 0, "SettlementUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedUserId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedUserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreatedDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CreatedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EditedUserId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "EditedUserId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@EditedDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "EditedDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsDeleted", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsDeleted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Lat", global::System.Data.SqlDbType.NChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Lat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Long", global::System.Data.SqlDbType.NChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "Long", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOver", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOver", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOverDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOverDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOverUser", global::System.Data.SqlDbType.NVarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOverUser", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TakeOverBill", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "TakeOverBill", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OperationDTO.Properties.Settings.Default.AmiSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[4];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Id, MeasurementPointId, MeterTypeId, MeasurementPointGroupId, DcuId, Type, Status, StartUpdateTime, PhaseType, Name, Note, Address, TURatio, TIRatio, Mutilplier, LaunchDay, SettlementDate, SettlementUser, CreatedUserId, CreatedDate, EditedUserId, EditedDate, IsDeleted, Lat, Long, TakeOver, TakeOverDate, TakeOverUser, TakeOverBill FROM dbo.MeasurementPoint";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        Id, MeasurementPointId, MeterTypeId, MeasurementPointGroupId, DcuId" +
                ", Type, Status, PhaseType, Name, Note, Address, Mutilplier, IsDeleted, TakeOverB" +
                "ill\r\nFROM            MeasurementPoint\r\nWHERE        (DcuId = @DcuId)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DcuId", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "DcuId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = @"SELECT        Id, MeasurementPointId, MeterTypeId, MeasurementPointGroupId, DcuId, Type, Status, StartUpdateTime, PhaseType, Name, Note, Address, TURatio, TIRatio, 
                         Mutilplier, LaunchDay, SettlementDate, SettlementUser, CreatedUserId, CreatedDate, EditedUserId, EditedDate, IsDeleted, Lat, Long, TakeOver, TakeOverDate, 
                         TakeOverUser, TakeOverBill
FROM            MeasurementPoint
WHERE        (MeasurementPointId = @measurementPointId)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@measurementPointId", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT        Id, MeasurementPointId, MeterTypeId, MeasurementPointGroupId, DcuId, Type, Status, PhaseType, Name, Note, Address, Mutilplier, Lat, Long, TakeOver, 
                         TakeOverDate, TakeOverUser, TakeOverBill, IsDeleted, StartUpdateTime, TURatio, TIRatio, LaunchDay, SettlementDate, SettlementUser, CreatedUserId, 
                         CreatedDate, EditedUserId, EditedDate
FROM            MeasurementPoint
WHERE        (Id = @Id)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id", global::System.Data.SqlDbType.BigInt, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(MeasurementPointDataSet.MeasurementPointDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual MeasurementPointDataSet.MeasurementPointDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            MeasurementPointDataSet.MeasurementPointDataTable dataTable = new MeasurementPointDataSet.MeasurementPointDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDcuId(MeasurementPointDataSet.MeasurementPointDataTable dataTable, global::System.Nullable<long> DcuId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((DcuId.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((long)(DcuId.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMeasurementPointCode(MeasurementPointDataSet.MeasurementPointDataTable dataTable, string measurementPointId) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((measurementPointId == null)) {
                throw new global::System.ArgumentNullException("measurementPointId");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(measurementPointId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByMeasurementPointId(MeasurementPointDataSet.MeasurementPointDataTable dataTable, long Id) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((long)(Id));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MeasurementPointDataSet.MeasurementPointDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(MeasurementPointDataSet dataSet) {
            return this.Adapter.Update(dataSet, "MeasurementPoint");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(long Original_Id) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((long)(Original_Id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string MeasurementPointId, 
                    global::System.Nullable<long> MeterTypeId, 
                    long MeasurementPointGroupId, 
                    global::System.Nullable<long> DcuId, 
                    int Type, 
                    string Status, 
                    global::System.Nullable<global::System.DateTime> StartUpdateTime, 
                    int PhaseType, 
                    string Name, 
                    string Note, 
                    string Address, 
                    global::System.Nullable<decimal> TURatio, 
                    global::System.Nullable<decimal> TIRatio, 
                    global::System.Nullable<decimal> Mutilplier, 
                    global::System.Nullable<global::System.DateTime> LaunchDay, 
                    global::System.Nullable<global::System.DateTime> SettlementDate, 
                    string SettlementUser, 
                    string CreatedUserId, 
                    global::System.Nullable<global::System.DateTime> CreatedDate, 
                    string EditedUserId, 
                    global::System.Nullable<global::System.DateTime> EditedDate, 
                    bool IsDeleted, 
                    string Lat, 
                    string Long, 
                    global::System.Nullable<int> TakeOver, 
                    global::System.Nullable<global::System.DateTime> TakeOverDate, 
                    string TakeOverUser, 
                    global::System.Nullable<long> TakeOverBill) {
            if ((MeasurementPointId == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(MeasurementPointId));
            }
            if ((MeterTypeId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((long)(MeterTypeId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((long)(MeasurementPointGroupId));
            if ((DcuId.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[3].Value = ((long)(DcuId.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Type));
            if ((Status == null)) {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(Status));
            }
            if ((StartUpdateTime.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(StartUpdateTime.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[7].Value = ((int)(PhaseType));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Name));
            }
            if ((Note == null)) {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Note));
            }
            if ((Address == null)) {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = ((string)(Address));
            }
            if ((TURatio.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((decimal)(TURatio.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TIRatio.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((decimal)(TIRatio.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Mutilplier.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((decimal)(Mutilplier.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LaunchDay.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(LaunchDay.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((SettlementDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(SettlementDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((SettlementUser == null)) {
                this.Adapter.InsertCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[16].Value = ((string)(SettlementUser));
            }
            if ((CreatedUserId == null)) {
                this.Adapter.InsertCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[17].Value = ((string)(CreatedUserId));
            }
            if ((CreatedDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[18].Value = ((System.DateTime)(CreatedDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((EditedUserId == null)) {
                this.Adapter.InsertCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[19].Value = ((string)(EditedUserId));
            }
            if ((EditedDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[20].Value = ((System.DateTime)(EditedDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[21].Value = ((bool)(IsDeleted));
            if ((Lat == null)) {
                this.Adapter.InsertCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[22].Value = ((string)(Lat));
            }
            if ((Long == null)) {
                this.Adapter.InsertCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[23].Value = ((string)(Long));
            }
            if ((TakeOver.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[24].Value = ((int)(TakeOver.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((TakeOverDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[25].Value = ((System.DateTime)(TakeOverDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((TakeOverUser == null)) {
                this.Adapter.InsertCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[26].Value = ((string)(TakeOverUser));
            }
            if ((TakeOverBill.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[27].Value = ((long)(TakeOverBill.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string MeasurementPointId, 
                    global::System.Nullable<long> MeterTypeId, 
                    long MeasurementPointGroupId, 
                    global::System.Nullable<long> DcuId, 
                    int Type, 
                    string Status, 
                    global::System.Nullable<global::System.DateTime> StartUpdateTime, 
                    int PhaseType, 
                    string Name, 
                    string Note, 
                    string Address, 
                    global::System.Nullable<decimal> TURatio, 
                    global::System.Nullable<decimal> TIRatio, 
                    global::System.Nullable<decimal> Mutilplier, 
                    global::System.Nullable<global::System.DateTime> LaunchDay, 
                    global::System.Nullable<global::System.DateTime> SettlementDate, 
                    string SettlementUser, 
                    string CreatedUserId, 
                    global::System.Nullable<global::System.DateTime> CreatedDate, 
                    string EditedUserId, 
                    global::System.Nullable<global::System.DateTime> EditedDate, 
                    bool IsDeleted, 
                    string Lat, 
                    string Long, 
                    global::System.Nullable<int> TakeOver, 
                    global::System.Nullable<global::System.DateTime> TakeOverDate, 
                    string TakeOverUser, 
                    global::System.Nullable<long> TakeOverBill, 
                    long Original_Id, 
                    long Id) {
            if ((MeasurementPointId == null)) {
                throw new global::System.ArgumentNullException("MeasurementPointId");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(MeasurementPointId));
            }
            if ((MeterTypeId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((long)(MeterTypeId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((long)(MeasurementPointGroupId));
            if ((DcuId.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((long)(DcuId.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Type));
            if ((Status == null)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Status));
            }
            if ((StartUpdateTime.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(StartUpdateTime.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(PhaseType));
            if ((Name == null)) {
                throw new global::System.ArgumentNullException("Name");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Name));
            }
            if ((Note == null)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Note));
            }
            if ((Address == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Address));
            }
            if ((TURatio.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((decimal)(TURatio.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((TIRatio.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((decimal)(TIRatio.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Mutilplier.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((decimal)(Mutilplier.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((LaunchDay.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(LaunchDay.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((SettlementDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(SettlementDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((SettlementUser == null)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(SettlementUser));
            }
            if ((CreatedUserId == null)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((string)(CreatedUserId));
            }
            if ((CreatedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((System.DateTime)(CreatedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((EditedUserId == null)) {
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[19].Value = ((string)(EditedUserId));
            }
            if ((EditedDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((System.DateTime)(EditedDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[21].Value = ((bool)(IsDeleted));
            if ((Lat == null)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((string)(Lat));
            }
            if ((Long == null)) {
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Long));
            }
            if ((TakeOver.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(TakeOver.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = global::System.DBNull.Value;
            }
            if ((TakeOverDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((System.DateTime)(TakeOverDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((TakeOverUser == null)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(TakeOverUser));
            }
            if ((TakeOverBill.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((long)(TakeOverBill.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[28].Value = ((long)(Original_Id));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((long)(Id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class MeasurementPointLostMessageTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public MeasurementPointLostMessageTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "MeasurementPointLostMessage";
            tableMapping.ColumnMappings.Add("MeasurementPointGroup", "MeasurementPointGroup");
            tableMapping.ColumnMappings.Add("DcuId", "DcuId");
            tableMapping.ColumnMappings.Add("MeasurementPointName", "MeasurementPointName");
            tableMapping.ColumnMappings.Add("ConnectionStatus", "ConnectionStatus");
            tableMapping.ColumnMappings.Add("GatewayIp", "GatewayIp");
            tableMapping.ColumnMappings.Add("ContractName", "ContractName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::OperationDTO.Properties.Settings.Default.AmiSystemConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "select \r\nct.Note as ContractName,\r\nmpg.Name as MeasurementPointGroup,\r\ndcu.DcuId," +
                "\r\nmp.Name as MeasurementPointName, \r\ndcu.ConnectionStatus, \r\ndcu.GatewayIp  from" +
                " \r\n[dbo].[MeasurementPoint] as mp\r\nleft join [dbo].[MeasurementPointGroup] as mp" +
                "g on mp.MeasurementPointGroupId = mpg.Id\r\nleft join DataConcentratorUnit as dcu " +
                "on mp.DcuId = dcu.Id\r\nleft join Contract as ct on mp.TakeOverBill = ct.Id\r\nleft " +
                "join MeasurementPointMeter as mpm on mp.Id = mpm.MeasurementPointId\r\nleft join\r\n" +
                " ( \r\n   -- Lấy các điểm đo có dữ liệu vào thời điểm nhập vào\r\n   select distinct" +
                " MeasurementPointMeterId, ServerTime \r\n   from [dbo].[Operation3P] \r\n   where ca" +
                "st(ServerTime as datetime) = cast( @serverTime as datetime)\r\n ) mplost on mpm.Me" +
                "asurementPointMeterId = mplost.MeasurementPointMeterId\r\n where mplost.Measuremen" +
                "tPointMeterId is null\r\nAND (@orgId is null or mpg.OrgId in (\r\n\t\t\t\t\t\t\t SELECT ID\r" +
                "\n\t\t\t\t\t\t\t FROM [Organization]\r\n\t\t\t\t\t\t\t WHERE ID = @orgId\r\n\t\t\t\t\t\t\t UNION\r\n\t\t\t\t\t\t\t " +
                "SELECT ID\r\n\t\t\t\t\t\t\t FROM [Organization]\r\n\t\t\t\t\t\t\t WHERE ParentID = @orgId\r\n\t\t\t\t\t\t\t" +
                " UNION ALL\r\n\t\t\t\t\t\t\t SELECT d.ID\r\n\t\t\t\t\t\t\t FROM [Organization] as d\r\n\t\t\t\t\t\t\t\tINNER" +
                " JOIN \r\n\t\t\t\t\t\t\t\t (  SELECT ID, Name\r\n\t\t\t\t\t\t\t\t\tFROM [Organization] WHERE ParentID" +
                " = @orgId\r\n\t\t\t\t\t\t\t\t )parent \r\n\t\t\t\t\t\t\t\t   ON d.ParentID = parent.ID\r\n\t\t\t\t\t\t\t\t)\r\n\t" +
                "\t\t\t\t\t )\r\n\t\t\t\t\t\t AND (@mpGroupId is null or mp.MeasurementPointGroupId = @mpGroup" +
                "Id)\r\n and (@dcucode is null or dcu.DcuId like \'%\'+@dcucode+\'%\')\r\n and (@gatewayI" +
                "p is null or dcu.GatewayIp = @gatewayIp)\r\n and (@connectionStatus is null or dcu" +
                ".ConnectionStatus = @connectionStatus)\r\n and (@contractId is null or ct.Id = @co" +
                "ntractId)\r\n and mp.IsDeleted = 0 and mp.Type = 1";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dcucode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "DcuId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gatewayIp", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GatewayIp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connectionStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ConnectionStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contractId", global::System.Data.SqlDbType.VarChar, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@serverTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orgId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mpGroupId", global::System.Data.SqlDbType.VarChar, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointGroupId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "select \r\nct.Note as ContractName,\r\nmpg.Name as MeasurementPointGroup,\r\ndcu.DcuId," +
                "\r\nmp.Name as MeasurementPointName, \r\ndcu.ConnectionStatus, \r\ndcu.GatewayIp  from" +
                " \r\n[dbo].[MeasurementPoint] as mp\r\nleft join [dbo].[MeasurementPointGroup] as mp" +
                "g on mp.MeasurementPointGroupId = mpg.Id\r\nleft join DataConcentratorUnit as dcu " +
                "on mp.DcuId = dcu.Id\r\nleft join Contract as ct on mp.TakeOverBill = ct.Id\r\nleft " +
                "join MeasurementPointMeter as mpm on mp.Id = mpm.MeasurementPointId\r\nleft join\r\n" +
                " ( \r\n     -- Lấy các điểm đo có dữ liệu vào thời điểm nhập vào\r\n   select distin" +
                "ct MeasurementPointMeterId \r\n   from [dbo].[Historical3P] \r\n   where cast(Histor" +
                "icalTime as datetime) = cast(@historicalTime as datetime)\r\n ) mplost on mpm.Meas" +
                "urementPointMeterId = mplost.MeasurementPointMeterId\r\n where mplost.MeasurementP" +
                "ointMeterId is null\r\nAND (@orgId is null or mpg.OrgId in (\r\n\t\t\t\t\t\t\t SELECT ID\r\n\t" +
                "\t\t\t\t\t\t FROM [Organization]\r\n\t\t\t\t\t\t\t WHERE ID = @orgId\r\n\t\t\t\t\t\t\t UNION\r\n\t\t\t\t\t\t\t SE" +
                "LECT ID\r\n\t\t\t\t\t\t\t FROM [Organization]\r\n\t\t\t\t\t\t\t WHERE ParentID = @orgId\r\n\t\t\t\t\t\t\t U" +
                "NION ALL\r\n\t\t\t\t\t\t\t SELECT d.ID\r\n\t\t\t\t\t\t\t FROM [Organization] as d\r\n\t\t\t\t\t\t\t\tINNER J" +
                "OIN \r\n\t\t\t\t\t\t\t\t (  SELECT ID, Name\r\n\t\t\t\t\t\t\t\t\tFROM [Organization] WHERE ParentID =" +
                " @orgId\r\n\t\t\t\t\t\t\t\t )parent \r\n\t\t\t\t\t\t\t\t   ON d.ParentID = parent.ID\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t" +
                "\t\t\t )\r\n\t\t\t\t\t\t AND (@mpGroupId is null or mp.MeasurementPointGroupId = @mpGroupId" +
                ")\r\n and (@dcucode is null or dcu.DcuId like \'%\'+@dcucode+\'%\')\r\n and (@gatewayIp " +
                "is null or dcu.GatewayIp = @gatewayIp)\r\n and (@connectionStatus is null or dcu.C" +
                "onnectionStatus = @connectionStatus)\r\n and (@contractId is null or ct.Id = @cont" +
                "ractId)\r\n and mp.IsDeleted = 0 and mp.Type = 1";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dcucode", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "DcuId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gatewayIp", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GatewayIp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@connectionStatus", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "ConnectionStatus", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@contractId", global::System.Data.SqlDbType.VarChar, 8, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@historicalTime", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@orgId", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mpGroupId", global::System.Data.SqlDbType.VarChar, 8, global::System.Data.ParameterDirection.Input, 0, 0, "MeasurementPointGroupId", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int GetOperationMessageLostByServerTime(MeasurementPointDataSet.MeasurementPointLostMessageDataTable dataTable, string dcucode, string gatewayIp, string connectionStatus, string contractId, System.DateTime serverTime, string orgId, string mpGroupId) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((dcucode == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(dcucode));
            }
            if ((gatewayIp == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(gatewayIp));
            }
            if ((connectionStatus == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(connectionStatus));
            }
            if ((contractId == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(contractId));
            }
            this.Adapter.SelectCommand.Parameters[4].Value = ((System.DateTime)(serverTime));
            if ((orgId == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(orgId));
            }
            if ((mpGroupId == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(mpGroupId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int GetHistoricalMessageLostByServerTime(MeasurementPointDataSet.MeasurementPointLostMessageDataTable dataTable, string dcucode, string gatewayIp, string connectionStatus, string contractId, System.DateTime historicalTime, string orgId, string mpGroupId) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((dcucode == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(dcucode));
            }
            if ((gatewayIp == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(gatewayIp));
            }
            if ((connectionStatus == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(connectionStatus));
            }
            if ((contractId == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(contractId));
            }
            this.Adapter.SelectCommand.Parameters[4].Value = ((System.DateTime)(historicalTime));
            if ((orgId == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(orgId));
            }
            if ((mpGroupId == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(mpGroupId));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private MeasurementPointTableAdapter _measurementPointTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public MeasurementPointTableAdapter MeasurementPointTableAdapter {
            get {
                return this._measurementPointTableAdapter;
            }
            set {
                this._measurementPointTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._measurementPointTableAdapter != null) 
                            && (this._measurementPointTableAdapter.Connection != null))) {
                    return this._measurementPointTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._measurementPointTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(MeasurementPointDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._measurementPointTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.MeasurementPoint.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._measurementPointTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(MeasurementPointDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._measurementPointTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.MeasurementPoint.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._measurementPointTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(MeasurementPointDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._measurementPointTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.MeasurementPoint.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._measurementPointTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(MeasurementPointDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._measurementPointTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._measurementPointTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._measurementPointTableAdapter != null)) {
                    revertConnections.Add(this._measurementPointTableAdapter, this._measurementPointTableAdapter.Connection);
                    this._measurementPointTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._measurementPointTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._measurementPointTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._measurementPointTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._measurementPointTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._measurementPointTableAdapter != null)) {
                    this._measurementPointTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._measurementPointTableAdapter]));
                    this._measurementPointTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591