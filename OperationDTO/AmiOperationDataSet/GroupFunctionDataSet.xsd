<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="GroupFunctionDataSet" targetNamespace="http://tempuri.org/GroupFunctionDataSet.xsd" xmlns:mstns="http://tempuri.org/GroupFunctionDataSet.xsd" xmlns="http://tempuri.org/GroupFunctionDataSet.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="AmiSystemOperationConnectionString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="AmiSystemOperationConnectionString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.OperationDTO.Properties.Settings.GlobalReference.Default.AmiSystemOperationConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="GroupFunctionTableAdapter" GeneratorDataComponentClassName="GroupFunctionTableAdapter" Name="GroupFunction" UserDataComponentName="GroupFunctionTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="AmiSystemOperationConnectionString (Settings)" DbObjectName="AmiSystemOperationManagement.dbo.GroupFunction" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [GroupFunction] WHERE (([GroupId] = @Original_GroupId) AND ([FunctionId] = @Original_FunctionId) AND ([IsActive] = @Original_IsActive))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_GroupId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="GroupId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_FunctionId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="FunctionId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Boolean" Direction="Input" ParameterName="@Original_IsActive" Precision="0" ProviderType="Bit" Scale="0" Size="0" SourceColumn="IsActive" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [GroupFunction] ([GroupId], [FunctionId], [IsActive]) VALUES (@GroupId, @FunctionId, @IsActive);
SELECT GroupId, FunctionId, IsActive FROM GroupFunction WHERE (FunctionId = @FunctionId) AND (GroupId = @GroupId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@GroupId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="GroupId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@FunctionId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="FunctionId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Boolean" Direction="Input" ParameterName="@IsActive" Precision="0" ProviderType="Bit" Scale="0" Size="0" SourceColumn="IsActive" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT        GroupId, FunctionId, IsActive
FROM            GroupFunction</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [GroupFunction] SET [GroupId] = @GroupId, [FunctionId] = @FunctionId, [IsActive] = @IsActive WHERE (([GroupId] = @Original_GroupId) AND ([FunctionId] = @Original_FunctionId) AND ([IsActive] = @Original_IsActive));
SELECT GroupId, FunctionId, IsActive FROM GroupFunction WHERE (FunctionId = @FunctionId) AND (GroupId = @GroupId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@GroupId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="GroupId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@FunctionId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="FunctionId" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Boolean" Direction="Input" ParameterName="@IsActive" Precision="0" ProviderType="Bit" Scale="0" Size="0" SourceColumn="IsActive" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_GroupId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="GroupId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_FunctionId" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="FunctionId" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Boolean" Direction="Input" ParameterName="@Original_IsActive" Precision="0" ProviderType="Bit" Scale="0" Size="0" SourceColumn="IsActive" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="GroupId" DataSetColumn="GroupId" />
              <Mapping SourceColumn="FunctionId" DataSetColumn="FunctionId" />
              <Mapping SourceColumn="IsActive" DataSetColumn="IsActive" />
            </Mappings>
            <Sources>
              <DbSource ConnectionRef="AmiSystemOperationConnectionString (Settings)" DbObjectName="AmiSystemOperationManagement.dbo.GroupFunction" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="FillByGroupId" GenerateMethods="Fill" GenerateShortCommands="true" GeneratorSourceName="FillByGroupId" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetDataBy" UserSourceName="FillByGroupId">
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="true">
                    <CommandText>SELECT FunctionId, GroupId, IsActive FROM GroupFunction WHERE (GroupId = @GroupId)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="GroupId" ColumnName="GroupId" DataSourceName="AmiSystemOperationManagement.dbo.GroupFunction" DataTypeServer="int" DbType="Int32" Direction="Input" ParameterName="@GroupId" Precision="0" ProviderType="Int" Scale="0" Size="4" SourceColumn="GroupId" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </SelectCommand>
              </DbSource>
            </Sources>
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="GroupFunctionDataSet" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="true" msprop:Generator_DataSetName="GroupFunctionDataSet" msprop:Generator_UserDSName="GroupFunctionDataSet">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="GroupFunction" msprop:Generator_TableClassName="GroupFunctionDataTable" msprop:Generator_TableVarName="tableGroupFunction" msprop:Generator_RowChangedName="GroupFunctionRowChanged" msprop:Generator_TablePropName="GroupFunction" msprop:Generator_RowDeletingName="GroupFunctionRowDeleting" msprop:Generator_RowChangingName="GroupFunctionRowChanging" msprop:Generator_RowEvHandlerName="GroupFunctionRowChangeEventHandler" msprop:Generator_RowDeletedName="GroupFunctionRowDeleted" msprop:Generator_RowClassName="GroupFunctionRow" msprop:Generator_UserTableName="GroupFunction" msprop:Generator_RowEvArgName="GroupFunctionRowChangeEvent">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="GroupId" msprop:Generator_ColumnVarNameInTable="columnGroupId" msprop:Generator_ColumnPropNameInRow="GroupId" msprop:Generator_ColumnPropNameInTable="GroupIdColumn" msprop:Generator_UserColumnName="GroupId" type="xs:int" />
              <xs:element name="FunctionId" msprop:Generator_ColumnVarNameInTable="columnFunctionId" msprop:Generator_ColumnPropNameInRow="FunctionId" msprop:Generator_ColumnPropNameInTable="FunctionIdColumn" msprop:Generator_UserColumnName="FunctionId" type="xs:int" />
              <xs:element name="IsActive" msprop:Generator_ColumnVarNameInTable="columnIsActive" msprop:Generator_ColumnPropNameInRow="IsActive" msprop:Generator_ColumnPropNameInTable="IsActiveColumn" msprop:Generator_UserColumnName="IsActive" type="xs:boolean" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:GroupFunction" />
      <xs:field xpath="mstns:GroupId" />
      <xs:field xpath="mstns:FunctionId" />
    </xs:unique>
  </xs:element>
</xs:schema>